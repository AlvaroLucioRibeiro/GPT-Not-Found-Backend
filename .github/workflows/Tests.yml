name: GPT404 Test Pipeline

on:
  push:
    branches:
      - main
      - develop
      - '**'
  pull_request:
    branches:
      - main
      - develop

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test_user"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout of code from repository
        uses: actions/checkout@v4

      - name: Configuration Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies and requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Defining environment variables
        run: |
          echo "SUPABASE_USER=test_user" >> $GITHUB_ENV
          echo "SUPABASE_PASSWORD=test_password" >> $GITHUB_ENV
          echo "SUPABASE_HOST=localhost" >> $GITHUB_ENV
          echo "SUPABASE_PORT=5432" >> $GITHUB_ENV
          echo "SUPABASE_DATABASE=test_db" >> $GITHUB_ENV

      - name: Create test database
        env:
          PGPASSWORD: test_password
        run: |
          psql -h localhost -U test_user -d test_db -f database/tables.sql

      - name: Criating test data
        env:
          PGPASSWORD: test_password
        run: |
          psql -h localhost -U test_user -d test_db -f database/base_data.sql

      - name: Running tests with pytest
        env:
          API_URL: "http://localhost:8000"
          SUPABASE_USER: test_user
          SUPABASE_PASSWORD: test_password
          SUPABASE_HOST: localhost
          SUPABASE_PORT: 5432
          SUPABASE_DATABASE: test_db
        run: |
          pytest --html=report.html --self-contained-html --cov=./ --cov-report=html --log-cli-level=INFO --log-file=logfile.log --log-file-level=DEBUG

      - name: Upload of Test Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: report.html

      - name: Upload of Log File
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logfile
          path: logfile.log

      - name: Upload of Coverage Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ./htmlcov

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Configuration Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies and requirements
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Install PyInstaller
      run: pip install pyinstaller

    - name: Build package with PyInstaller
      run: |
        pyinstaller --onefile src/modules/modules.py

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: pacote
        path: dist/*

  notify:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Install mailx
        run: sudo apt-get install -y mailutils

      - name: Send email notification
        run: |
          for email in $(echo "${{ secrets.EMAILS }}" | tr ',' '\n'); do
            echo "Pipeline executed successfully!" | mailx -s "Pipeline Notification" "$email"
          done
        env:
          EMAILS: ${{ secrets.EMAILS }}